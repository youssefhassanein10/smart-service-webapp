const express = require('express');
const fileUpload = require('express-fileupload');
const { Pool } = require('pg');
const path = require('path');
const fs = require('fs');

const app = express();

// Middleware
app.use(express.json());
app.use(express.urlencoded({ extended: true }));
app.use(fileUpload({
    createParentPath: true,
    limits: { fileSize: 10 * 1024 * 1024 },
    useTempFiles: false
}));
app.use(express.static('public'));

// CORS middleware
app.use((req, res, next) => {
    res.header('Access-Control-Allow-Origin', '*');
    res.header('Access-Control-Allow-Methods', 'GET, POST, PUT, DELETE');
    res.header('Access-Control-Allow-Headers', 'Content-Type, Authorization');
    next();
});

// –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î
let pool = null;

// –î–∞–Ω–Ω—ã–µ –≤ –ø–∞–º—è—Ç–∏ (—Ä–µ–∑–µ—Ä–≤–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ)
let memoryData = {
    settings: {
        shop_name: 'Smart Service',
        holder_name: '–ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤',
        inn: '1234567890',
        registration_address: '–≥. –ú–æ—Å–∫–≤–∞, —É–ª. –ü—Ä–∏–º–µ—Ä–Ω–∞—è, –¥. 1',
        organization_address: '–≥. –ú–æ—Å–∫–≤–∞, —É–ª. –ü—Ä–∏–º–µ—Ä–Ω–∞—è, –¥. 1',
        email: 'example@email.com',
        phone: '+79991234567'
    },
    services: [],
    categories: [],
    orders: []
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
function saveUploadedImage(imageFile) {
    if (!imageFile) return null;
    
    try {
        const uploadDir = path.join(__dirname, 'public', 'uploads');
        if (!fs.existsSync(uploadDir)) {
            fs.mkdirSync(uploadDir, { recursive: true });
        }
        
        const fileExtension = path.extname(imageFile.name);
        const fileName = `service_${Date.now()}${fileExtension}`;
        const filePath = path.join(uploadDir, fileName);
        
        imageFile.mv(filePath);
        return `/uploads/${fileName}`;
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:', error);
        return null;
    }
}

// –§—É–Ω–∫—Ü–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
async function connectDatabase() {
    try {
        const databaseUrl = process.env.DATABASE_URL;
        
        if (!databaseUrl) {
            console.log('‚ö†Ô∏è DATABASE_URL –Ω–µ –Ω–∞–π–¥–µ–Ω. –†–µ–∂–∏–º –±–µ–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.');
            return null;
        }

        console.log('üîó –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...');
        
        pool = new Pool({
            connectionString: databaseUrl,
            ssl: { rejectUnauthorized: false },
            connectionTimeoutMillis: 10000,
            idleTimeoutMillis: 30000,
            max: 10
        });

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
        const client = await pool.connect();
        console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
        
        // –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
        await client.query(`
            CREATE TABLE IF NOT EXISTS shop_settings (
                id SERIAL PRIMARY KEY,
                shop_name VARCHAR(255) DEFAULT 'Smart Service',
                holder_name VARCHAR(255),
                inn VARCHAR(50),
                registration_address TEXT,
                organization_address TEXT,
                email VARCHAR(255),
                phone VARCHAR(50),
                created_at TIMESTAMP DEFAULT NOW(),
                updated_at TIMESTAMP DEFAULT NOW()
            )
        `);

        await client.query(`
            CREATE TABLE IF NOT EXISTS categories (
                id SERIAL PRIMARY KEY,
                name VARCHAR(255) NOT NULL,
                description TEXT,
                image_url VARCHAR(500),
                sort_order INTEGER DEFAULT 0,
                is_active BOOLEAN DEFAULT true
            )
        `);

        await client.query(`
            CREATE TABLE IF NOT EXISTS services (
                id SERIAL PRIMARY KEY,
                article VARCHAR(100) UNIQUE NOT NULL,
                name VARCHAR(255) NOT NULL,
                description TEXT,
                price DECIMAL(10,2) NOT NULL,
                category_id INTEGER REFERENCES categories(id),
                image_url VARCHAR(500),
                is_active BOOLEAN DEFAULT true,
                created_at TIMESTAMP DEFAULT NOW(),
                updated_at TIMESTAMP DEFAULT NOW()
            )
        `);

        // –¢–∞–±–ª–∏—Ü–∞ –∑–∞–∫–∞–∑–æ–≤
        await client.query(`
            CREATE TABLE IF NOT EXISTS orders (
                id SERIAL PRIMARY KEY,
                service_id INTEGER REFERENCES services(id),
                service_name VARCHAR(255) NOT NULL,
                service_price DECIMAL(10,2) NOT NULL,
                customer_name VARCHAR(255),
                customer_contact VARCHAR(255),
                payment_method VARCHAR(100),
                status VARCHAR(50) DEFAULT 'pending',
                admin_contact VARCHAR(255) DEFAULT '@Paymentprosu',
                created_at TIMESTAMP DEFAULT NOW(),
                updated_at TIMESTAMP DEFAULT NOW()
            )
        `);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –Ω–∞—á–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        const settingsCount = await client.query('SELECT COUNT(*) FROM shop_settings');
        if (parseInt(settingsCount.rows[0].count) === 0) {
            await client.query(`
                INSERT INTO shop_settings (shop_name, holder_name, inn, registration_address, organization_address, email, phone) 
                VALUES ('Smart Service', '–ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤', '1234567890', '–≥. –ú–æ—Å–∫–≤–∞, —É–ª. –ü—Ä–∏–º–µ—Ä–Ω–∞—è, –¥. 1', '–≥. –ú–æ—Å–∫–≤–∞, —É–ª. –ü—Ä–∏–º–µ—Ä–Ω–∞—è, –¥. 1', 'example@email.com', '+79991234567')
            `);
            console.log('‚úÖ –ù–∞—á–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –ë–î');
        }

        client.release();
        return pool;
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö:', error.message);
        console.log('‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –≤ –ø–∞–º—è—Ç–∏');
        return null;
    }
}

// API Routes

// –ü–æ–ª—É—á–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –º–∞–≥–∞–∑–∏–Ω–∞
app.get('/api/shop-settings', async (req, res) => {
    try {
        if (pool) {
            const result = await pool.query('SELECT * FROM shop_settings ORDER BY id DESC LIMIT 1');
            if (result.rows.length > 0) {
                return res.json(result.rows[0]);
            }
        }
        res.json(memoryData.settings);
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫:', error);
        res.json(memoryData.settings);
    }
});

// –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –º–∞–≥–∞–∑–∏–Ω–∞
app.post('/api/shop-settings', async (req, res) => {
    console.log('üì® –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫:', req.body);
    
    try {
        const { 
            shop_name, 
            holder_name, 
            inn, 
            registration_address, 
            organization_address, 
            email, 
            phone 
        } = req.body;

        if (!shop_name || !holder_name) {
            return res.status(400).json({ error: '–ù–∞–∑–≤–∞–Ω–∏–µ –º–∞–≥–∞–∑–∏–Ω–∞ –∏ –∏–º—è –¥–µ—Ä–∂–∞—Ç–µ–ª—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã' });
        }

        if (pool) {
            await pool.query('DELETE FROM shop_settings');
            
            const result = await pool.query(
                `INSERT INTO shop_settings 
                 (shop_name, holder_name, inn, registration_address, organization_address, email, phone) 
                 VALUES ($1, $2, $3, $4, $5, $6, $7) 
                 RETURNING *`,
                [shop_name, holder_name, inn, registration_address, organization_address, email, phone]
            );

            console.log('‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –ë–î');
            return res.json(result.rows[0]);
        } else {
            memoryData.settings = {
                shop_name, 
                holder_name, 
                inn, 
                registration_address, 
                organization_address, 
                email, 
                phone
            };
            console.log('‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –ø–∞–º—è—Ç–∏');
            res.json(memoryData.settings);
        }
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫:', error);
        res.status(500).json({ error: error.message });
    }
});

// API –¥–ª—è —É—Å–ª—É–≥
app.get('/api/services', async (req, res) => {
    try {
        if (pool) {
            const result = await pool.query(`
                SELECT s.*, c.name as category_name 
                FROM services s 
                LEFT JOIN categories c ON s.category_id = c.id 
                WHERE s.is_active = true 
                ORDER BY s.created_at DESC
            `);
            return res.json(result.rows);
        }
        res.json(memoryData.services);
    } catch (error) {
        res.json(memoryData.services);
    }
});

// –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —É—Å–ª—É–≥—É —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º
app.post('/api/services', async (req, res) => {
    try {
        console.log('üì® –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —É—Å–ª—É–≥–∏:', req.body);
        
        const { article, name, description, price, category_id } = req.body;
        let imageUrl = null;

        if (req.files && req.files.image) {
            imageUrl = saveUploadedImage(req.files.image);
            console.log('üñºÔ∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ:', imageUrl);
        }

        if (pool) {
            const result = await pool.query(
                `INSERT INTO services (article, name, description, price, category_id, image_url) 
                 VALUES ($1, $2, $3, $4, $5, $6) 
                 RETURNING *`,
                [article, name, description, parseFloat(price), category_id || null, imageUrl]
            );
            console.log('‚úÖ –£—Å–ª—É–≥–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ –ë–î');
            return res.json(result.rows[0]);
        } else {
            const newService = {
                id: memoryData.services.length + 1,
                article, 
                name, 
                description, 
                price: parseFloat(price), 
                category_id: category_id || null,
                image_url: imageUrl,
                created_at: new Date()
            };
            memoryData.services.push(newService);
            console.log('‚úÖ –£—Å–ª—É–≥–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ –ø–∞–º—è—Ç–∏');
            res.json(newService);
        }
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —É—Å–ª—É–≥–∏:', error);
        res.status(500).json({ error: error.message });
    }
});

// API –¥–ª—è –∑–∞–∫–∞–∑–æ–≤
app.get('/api/orders', async (req, res) => {
    try {
        if (pool) {
            const result = await pool.query(`
                SELECT o.*, s.name as service_name 
                FROM orders o 
                LEFT JOIN services s ON o.service_id = s.id 
                ORDER BY o.created_at DESC
            `);
            return res.json(result.rows);
        }
        res.json(memoryData.orders);
    } catch (error) {
        res.json(memoryData.orders);
    }
});

// –°–æ–∑–¥–∞—Ç—å –∑–∞–∫–∞–∑
app.post('/api/orders', async (req, res) => {
    try {
        const { service_id, service_name, service_price, customer_name, customer_contact, payment_method } = req.body;

        if (!service_id || !customer_name || !payment_method) {
            return res.status(400).json({ error: '–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è' });
        }

        if (pool) {
            const result = await pool.query(
                `INSERT INTO orders (service_id, service_name, service_price, customer_name, customer_contact, payment_method) 
                 VALUES ($1, $2, $3, $4, $5, $6) 
                 RETURNING *`,
                [service_id, service_name, parseFloat(service_price), customer_name, customer_contact, payment_method]
            );
            console.log('‚úÖ –ó–∞–∫–∞–∑ —Å–æ–∑–¥–∞–Ω:', result.rows[0]);
            return res.json(result.rows[0]);
        } else {
            const newOrder = {
                id: memoryData.orders.length + 1,
                service_id,
                service_name,
                service_price: parseFloat(service_price),
                customer_name,
                customer_contact,
                payment_method,
                status: 'pending',
                admin_contact: '@Paymentprosu',
                created_at: new Date()
            };
            memoryData.orders.push(newOrder);
            console.log('‚úÖ –ó–∞–∫–∞–∑ —Å–æ–∑–¥–∞–Ω –≤ –ø–∞–º—è—Ç–∏');
            res.json(newOrder);
        }
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞:', error);
        res.status(500).json({ error: error.message });
    }
});

// –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞
app.put('/api/orders/:id', async (req, res) => {
    try {
        const { id } = req.params;
        const { status } = req.body;

        if (pool) {
            const result = await pool.query(
                'UPDATE orders SET status = $1, updated_at = NOW() WHERE id = $2 RETURNING *',
                [status, id]
            );
            res.json(result.rows[0]);
        } else {
            const order = memoryData.orders.find(o => o.id == id);
            if (order) {
                order.status = status;
                order.updated_at = new Date();
            }
            res.json(order);
        }
    } catch (error) {
        res.status(500).json({ error: error.message });
    }
});

// API –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π
app.get('/api/categories', async (req, res) => {
    try {
        if (pool) {
            const result = await pool.query('SELECT * FROM categories WHERE is_active = true ORDER BY sort_order, name');
            return res.json(result.rows);
        }
        res.json(memoryData.categories);
    } catch (error) {
        res.json(memoryData.categories);
    }
});

// API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–æ—Å–æ–±–æ–≤ –æ–ø–ª–∞—Ç—ã
app.get('/api/payment-methods', (req, res) => {
    const paymentMethods = [
        {
            id: 'sberbank',
            name: '–°–±–µ—Ä–±–∞–Ω–∫',
            icon: 'üè¶',
            details: '–ü–µ—Ä–µ–≤–æ–¥ –ø–æ –Ω–æ–º–µ—Ä—É –∫–∞—Ä—Ç—ã/—Ç–µ–ª–µ—Ñ–æ–Ω–∞',
            instructions: '–ü–µ—Ä–µ–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –Ω–∞ –∫–∞—Ä—Ç—É –°–±–µ—Ä–±–∞–Ω–∫–∞: 2202 2002 2020 2020\n–ò–ª–∏ –ø–æ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞: +7 900 123-45-67'
        },
        {
            id: 'tinkoff',
            name: '–¢–∏–Ω—å–∫–æ—Ñ—Ñ',
            icon: 'üí≥',
            details: '–ü–µ—Ä–µ–≤–æ–¥ –Ω–∞ –∫–∞—Ä—Ç—É –¢–∏–Ω—å–∫–æ—Ñ—Ñ',
            instructions: '–ü–µ—Ä–µ–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –Ω–∞ –∫–∞—Ä—Ç—É –¢–∏–Ω—å–∫–æ—Ñ—Ñ: 2200 7007 8998 1122\n–í–ª–∞–¥–µ–ª–µ—Ü: –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤'
        },
        {
            id: 'vtb',
            name: '–í–¢–ë',
            icon: 'üèõÔ∏è',
            details: '–ü–µ—Ä–µ–≤–æ–¥ –Ω–∞ –∫–∞—Ä—Ç—É –í–¢–ë',
            instructions: '–ü–µ—Ä–µ–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –Ω–∞ –∫–∞—Ä—Ç—É –í–¢–ë: 2202 2003 3004 4005\n–í–ª–∞–¥–µ–ª–µ—Ü: –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤'
        },
        {
            id: 'alfabank',
            name: '–ê–ª—å—Ñ–∞-–ë–∞–Ω–∫',
            icon: 'üî∑',
            details: '–ü–µ—Ä–µ–≤–æ–¥ –Ω–∞ –∫–∞—Ä—Ç—É –ê–ª—å—Ñ–∞-–ë–∞–Ω–∫–∞',
            instructions: '–ü–µ—Ä–µ–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –Ω–∞ –∫–∞—Ä—Ç—É –ê–ª—å—Ñ–∞-–ë–∞–Ω–∫–∞: 2200 0000 1111 2222\n–í–ª–∞–¥–µ–ª–µ—Ü: –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤'
        },
        {
            id: 'gazprom',
            name: '–ì–∞–∑–ø—Ä–æ–º–±–∞–Ω–∫',
            icon: '‚õΩ',
            details: '–ü–µ—Ä–µ–≤–æ–¥ –Ω–∞ –∫–∞—Ä—Ç—É –ì–∞–∑–ø—Ä–æ–º–±–∞–Ω–∫–∞',
            instructions: '–ü–µ—Ä–µ–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –Ω–∞ –∫–∞—Ä—Ç—É –ì–∞–∑–ø—Ä–æ–º–±–∞–Ω–∫–∞: 2200 3333 4444 5555\n–í–ª–∞–¥–µ–ª–µ—Ü: –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤'
        },
        {
            id: 'raiffeisen',
            name: '–†–∞–π—Ñ—Ñ–∞–π–∑–µ–Ω–±–∞–Ω–∫',
            icon: 'üè¢',
            details: '–ü–µ—Ä–µ–≤–æ–¥ –Ω–∞ –∫–∞—Ä—Ç—É –†–∞–π—Ñ—Ñ–∞–π–∑–µ–Ω–±–∞–Ω–∫–∞',
            instructions: '–ü–µ—Ä–µ–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –Ω–∞ –∫–∞—Ä—Ç—É –†–∞–π—Ñ—Ñ–∞–π–∑–µ–Ω–±–∞–Ω–∫–∞: 2200 6666 7777 8888\n–í–ª–∞–¥–µ–ª–µ—Ü: –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤'
        },
        {
            id: 'qiwi',
            name: 'QIWI',
            icon: 'üëõ',
            details: '–ü–µ—Ä–µ–≤–æ–¥ –Ω–∞ –∫–æ—à–µ–ª–µ–∫ QIWI',
            instructions: '–ü–µ—Ä–µ–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –Ω–∞ QIWI –∫–æ—à–µ–ª–µ–∫: +7 900 123-45-67'
        },
        {
            id: 'yoomoney',
            name: '–ÆMoney',
            icon: 'üí∑',
            details: '–ü–µ—Ä–µ–≤–æ–¥ –Ω–∞ –∫–æ—à–µ–ª–µ–∫ –ÆMoney',
            instructions: '–ü–µ—Ä–µ–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –Ω–∞ –∫–æ—à–µ–ª–µ–∫ –ÆMoney: 4100 1234 5678 9012'
        },
        {
            id: 'nspk',
            name: 'QR –ù–°–ü–ö',
            icon: 'üì±',
            details: '–û–ø–ª–∞—Ç–∞ –ø–æ QR-–∫–æ–¥—É (–°–ë–ü)',
            instructions: '–û—Ç—Å–∫–∞–Ω–∏—Ä—É–π—Ç–µ QR-–∫–æ–¥ —á–µ—Ä–µ–∑ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≤–∞—à–µ–≥–æ –±–∞–Ω–∫–∞ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –°–ë–ü'
        }
    ];
    
    res.json(paymentMethods);
});

// –î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏–π –º–∞—Ä—à—Ä—É—Ç
app.get('/api/debug', async (req, res) => {
    try {
        const debugInfo = {
            status: 'running',
            timestamp: new Date().toISOString(),
            database: {
                hasDatabaseUrl: !!process.env.DATABASE_URL,
                poolConnected: !!pool,
                urlLength: process.env.DATABASE_URL ? process.env.DATABASE_URL.length : 0
            },
            memory: {
                settings: memoryData.settings,
                servicesCount: memoryData.services.length,
                ordersCount: memoryData.orders.length,
                categoriesCount: memoryData.categories.length
            }
        };

        if (pool) {
            const tables = await pool.query(`
                SELECT table_name 
                FROM information_schema.tables 
                WHERE table_schema = 'public'
            `);
            debugInfo.database.tables = tables.rows.map(row => row.table_name);

            const settingsCount = await pool.query('SELECT COUNT(*) FROM shop_settings');
            debugInfo.database.settingsCount = parseInt(settingsCount.rows[0].count);

            const servicesCount = await pool.query('SELECT COUNT(*) FROM services');
            debugInfo.database.servicesCount = parseInt(servicesCount.rows[0].count);

            const ordersCount = await pool.query('SELECT COUNT(*) FROM orders');
            debugInfo.database.ordersCount = parseInt(ordersCount.rows[0].count);
        }

        res.json(debugInfo);
    } catch (error) {
        res.json({ 
            status: 'error',
            error: error.message 
        });
    }
});

// –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã
app.get('/', (req, res) => {
    res.sendFile(path.join(__dirname, 'public', 'index.html'));
});

app.get('/admin', (req, res) => {
    res.sendFile(path.join(__dirname, 'public', 'admin.html'));
});

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
const PORT = process.env.PORT || 3000;

async function startServer() {
    console.log('üöÄ –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞...');
    console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è:');
    console.log('PORT:', PORT);
    console.log('DATABASE_URL:', process.env.DATABASE_URL ? '–ï—Å—Ç—å (' + process.env.DATABASE_URL.length + ' —Å–∏–º–≤–æ–ª–æ–≤)' : '–ù–ï–¢!');
    
    // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    await connectDatabase();
    
    app.listen(PORT, () => {
        console.log(`‚úÖ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
        console.log(`üè™ –ú–∞–≥–∞–∑–∏–Ω: http://localhost:${PORT}`);
        console.log(`‚öôÔ∏è –ê–¥–º–∏–Ω–∫–∞: http://localhost:${PORT}/admin`);
        console.log(`üîß –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞: http://localhost:${PORT}/api/debug`);
        console.log(pool ? '‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∞' : '‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ');
    });
}

startServer().catch(console.error);
